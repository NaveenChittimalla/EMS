/*
Deployment script for EMS

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "EMS"
:setvar DefaultFilePrefix "EMS"
:setvar DefaultDataPath "D:\Program Files (x86)\Microsoft SQL Server\MSSQL14.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "D:\Program Files (x86)\Microsoft SQL Server\MSSQL14.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL)
BEGIN
    DECLARE @rc      int,                       -- return code
            @fn      nvarchar(4000),            -- file name for back up
            @dir     nvarchar(4000)             -- backup directory

    EXEC @rc = [master].[dbo].[xp_instance_regread] N'HKEY_LOCAL_MACHINE', N'Software\Microsoft\MSSQLServer\MSSQLServer', N'BackupDirectory', @dir output, 'no_output'
    if (@rc = 0) SELECT @dir = @dir + N'\'

    IF (@dir IS NULL)
    BEGIN 
        EXEC @rc = [master].[dbo].[xp_instance_regread] N'HKEY_LOCAL_MACHINE', N'Software\Microsoft\MSSQLServer\MSSQLServer', N'DefaultData', @dir output, 'no_output'
        if (@rc = 0) SELECT @dir = @dir + N'\'
    END

    IF (@dir IS NULL)
    BEGIN
        EXEC @rc = [master].[dbo].[xp_instance_regread] N'HKEY_LOCAL_MACHINE', N'Software\Microsoft\MSSQLServer\Setup', N'SQLDataRoot', @dir output, 'no_output'
        if (@rc = 0) SELECT @dir = @dir + N'\Backup\'
    END

    IF (@dir IS NULL)
    BEGIN
        SELECT @dir = N'$(DefaultDataPath)'
    END

    SELECT  @fn = @dir + N'$(DatabaseName)' + N'-' + 
            CONVERT(nchar(8), GETDATE(), 112) + N'-' + 
            RIGHT(N'0' + RTRIM(CONVERT(nchar(2), DATEPART(hh, GETDATE()))), 2) + 
            RIGHT(N'0' + RTRIM(CONVERT(nchar(2), DATEPART(mi, getdate()))), 2) + 
            RIGHT(N'0' + RTRIM(CONVERT(nchar(2), DATEPART(ss, getdate()))), 2) + 
            N'.bak' 
            BACKUP DATABASE [$(DatabaseName)] TO DISK = @fn
END
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
/*
The type for column Email in table [dbo].[Employee] is currently  NVARCHAR (500) NOT NULL but is being changed to  NVARCHAR (250) NOT NULL. Data loss could occur and deployment may fail if the column contains data that is incompatible with type  NVARCHAR (250) NOT NULL.

The type for column EmployeeCode in table [dbo].[Employee] is currently  NVARCHAR (250) NULL but is being changed to  NVARCHAR (100) NULL. Data loss could occur and deployment may fail if the column contains data that is incompatible with type  NVARCHAR (100) NULL.
*/

IF EXISTS (select top 1 1 from [dbo].[Employee])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Altering Table [dbo].[Employee]...';


GO
ALTER TABLE [dbo].[Employee] ALTER COLUMN [Email] NVARCHAR (250) NOT NULL;

ALTER TABLE [dbo].[Employee] ALTER COLUMN [EmployeeCode] NVARCHAR (100) NULL;

ALTER TABLE [dbo].[Employee] ALTER COLUMN [LastName] NVARCHAR (250) NULL;


GO
PRINT N'Creating Table [dbo].[Department]...';


GO
CREATE TABLE [dbo].[Department] (
    [Id]     INT            IDENTITY (1, 1) NOT NULL,
    [Code]   NVARCHAR (100) NULL,
    [Name]   NVARCHAR (250) NOT NULL,
    [Active] BIT            NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Department]...';


GO
ALTER TABLE [dbo].[Department]
    ADD DEFAULT (1) FOR [Active];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Employee]...';


GO
ALTER TABLE [dbo].[Employee]
    ADD DEFAULT (1) FOR [Active];


GO
PRINT N'Creating Function [dbo].[FN_Employee_Generate_Code]...';


GO
CREATE FUNCTION [dbo].[FN_Employee_Generate_Code]
(
	@EmployeeId int
)
RETURNS NVARCHAR(100)
AS
BEGIN
	RETURN CONCAT('EMS', @EmployeeId)
END
GO
PRINT N'Altering Procedure [dbo].[Employee_Update_Details]...';


GO
ALTER PROCEDURE [dbo].[Employee_Update_Details] 
    @Id INT,
    @FirstName NVARCHAR(250),
    @LastName NVARCHAR(250),
    @Email NVARCHAR(550),
    @Active BIT
AS
BEGIN
  SET NOCOUNT ON;

  UPDATE Employee
  SET FirstName = @FirstName,
      LastName = @LastName,
      Email = @Email,
      Active = @Active
  FROM dbo.Employee Employee
  WHERE Id = @Id

END
GO
PRINT N'Creating Procedure [dbo].[Employee_DeleteById]...';


GO
CREATE PROCEDURE [dbo].[Employee_DeleteById] @Id INT
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM Employee
    WHERE Id = @Id
END
GO
PRINT N'Creating Procedure [dbo].[Employee_GetAll]...';


GO
CREATE PROCEDURE [dbo].[Employee_GetAll]
AS
BEGIN
	SET NOCOUNT ON;
	
	SELECT 
		Id,
		EmployeeCode,
		FirstName,
		LastName,
		Email,
		Active
	FROM dbo.Employee
END
GO
PRINT N'Creating Procedure [dbo].[Employee_GetById]...';


GO
CREATE PROCEDURE [dbo].[Employee_GetById]
	@Id INT
AS
BEGIN
	SET NOCOUNT ON;
	
	SELECT 
		Id,
		EmployeeCode,
		FirstName,
		LastName,
		Email,
		Active
	FROM dbo.Employee
	WHERE Id = @Id
END
GO
PRINT N'Creating Procedure [dbo].[Employee_Insert]...';


GO
CREATE PROCEDURE [dbo].[Employee_Insert]
    @FirstName NVARCHAR(250),
    @LastName NVARCHAR(250),
    @Email NVARCHAR(250),
    @Active BIT
AS
BEGIN
    SET NOCOUNT ON;

    INSERT INTO Employee
    (
        FirstName,
        LastName,
        Email,
        Active
    )
    values
    (
        @FirstName,
        @LastName,
        @Email,
        @Active
    );

    DECLARE @NewEmployeeId INT
    SET @NewEmployeeId = @@IDENTITY
    
    UPDATE Employee
    SET EmployeeCode = [dbo].[FN_Employee_Generate_Code](@NewEmployeeId)
    FROM dbo.Employee Employee
    WHERE id = @NewEmployeeId;
    
    SELECT @NewEmployeeId
END
GO
PRINT N'Update complete.';


GO
